"general options
set encoding=UTF-8
set backspace=indent,eol,start
let g:wrapText=0
syntax on
set mouse=a
set confirm
set so=8 "cursor above 8 lines from the bottom of the screen
set ruler

"indent
set autoindent
filetype indent on
filetype plugin on
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
set smartindent
set expandtab
set smarttab
set shiftwidth=4

"search
set ignorecase
set smartcase
set nohlsearch
set incsearch
set showmatch
nmap <silent> <F4> :set hlsearch!<Cr>

"statusline
set wildmenu
set showmode
set showcmd
set laststatus=2
set statusline+=%f

"Plugins
call plug#begin('~/.vim/plugged')
"--dependencies
Plug 'marcweber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'google/vim-maktaba'
Plug 'ryanoasis/vim-devicons'
"--appearance
Plug 'itchyny/lightline.vim'
Plug 'flazz/vim-colorschemes'
"---utility
Plug 'sheerun/vim-polyglot'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
"Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf', {'on': 'FZF' }
Plug 'francoiscabrol/ranger.vim', { 'on': 'Ranger' }
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'unblevable/quick-scope'
"git
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/vim-gitbranch'
"---Programming
Plug 'ap/vim-css-color'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'neoclide/coc.nvim', {'branch': 'release' }
Plug 'nathanaelkane/vim-indent-guides'
Plug 'adelarsq/vim-matchit'
Plug 'arp242/jumpy.vim'
"---languages
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'vim-scripts/taglist.vim', {'on': ['TlistToggle', 'TlistOpen']}
Plug 'vim-scripts/a.vim', { 'for': ['c',  'cpp'] }
Plug 'othree/xml.vim', { 'for': ['xml', 'html'] }
Plug 'lervag/vimtex', { 'for': 'tex' }
Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
Plug 'vim-scripts/dbext.vim', { 'for': 'sql' }
"maybe
"Plug 'bazelbuild/vim-bazel'
"Plug 'justmao945/vim-clang'
"Plug 'scrooloose/syntastic'
call plug#end()

"gui
set termguicolors
colorscheme codedark
"set guifont=JetBrainsMono\ Nerd\ Font\ Mono\ Regular\ 10
set guifont=Proggy\ Vector\ Regular\ 10
hi Normal ctermbg=none
highlight NonText ctermbg=none

"columns
set colorcolumn=0
set cursorcolumn
highlight CursorColumn cterm=bold guibg=#2b2b2b
function SetColorColumn()
    if &colorcolumn == 0
        set colorcolumn=80
    else
        set colorcolumn=0
    endif
    echo &colorcolumn
endfunction
nnoremap <F3> :call SetColorColumn()<Cr>
nnoremap <C-F3> :set colorcolumn=

" go to last line
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"auto formatting
function! Kformat()
    let line = line('.')
    :norm gg=G
    "to 80 char:
    ":norm ggVGgq
    :exec line
endfunction
nnoremap <F9> :call Kformat()<Cr>

"splits
set splitbelow splitright
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l
nmap <C-k> <C-w>k
nmap <C-j> <C-w>j
nmap <Up> <C-w>+
nmap <Down> <C-w>-
nmap <Left> <C-w><
nmap <Right> <C-w>>
nnoremap <F10> :set splitbelow!<Cr>:set nosplitright!<Cr>

"spelling
function SetSpell()
    if &spell == 0
        set spell spelllang=it
    else
        if &spelllang ==# 'it'
            set nospell
            set spell spelllang=en
        else
            set nospell
        endif
    endif
endfunction
nnoremap <silent> <F5> :call SetSpell()<Cr>

"general mapping
nnoremap <Esc><Esc> :w<Cr>
nmap ^ @q

"change/delete if / for
nnoremap dai $?if\\|for<Cr>dt{da{
nnoremap cai $?if\\|for<Cr>dt{ca{
nnoremap cic $?if\\|for<Cr>f(ci(

"move selected text
noremap <Space>j J
vnoremap J :m '>+1<Cr>gv=gv
vnoremap K :m '>-2<Cr>gv=gv

"up and down
nnoremap + k0C
nnoremap - j0C
noremap <Del> ddk

"numbers
set number norelativenumber
nnoremap <silent> <F2> :set number relativenumber!<Cr>

"clipboard
inoremap <C-v> <C-r>0
vnoremap <Space>y :'<,'> :w !wl-copy<Cr><Cr>

"tabs
nnoremap <S-k> :tabprevious<Cr>
nnoremap <S-j> :tabnext<Cr>

" move around
nnoremap E gE
nnoremap <Space>w f 
nnoremap <Space>b F 

